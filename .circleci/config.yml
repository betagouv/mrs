# Check https://circleci.com/docs/2.0/language-python/ for more details
version: 2

workflows:
  version: 2
  pipeline:
    jobs:
      - qa
      - test
      - build:
          requires:
          - qa
          - test
      - branch-tag:
          requires:
          - build
      - deploy-staging:
          filters:
            branches:
              only:
              - cd
          requires:
          - build
      - validate-staging:
          filters:
            branches:
              only:
              - cd
          type: approval
          requires:
          - deploy-staging
      - deploy-production:
          filters:
            branches:
              only:
              - cd
          requires:
          - validate-staging

jobs:
  qa:
    docker:
    - image: circleci/python:3.6.1
    working_directory: ~/repo
    steps:
    - checkout
    - restore_cache:
        keys:
        - qa-dependencies-{{ checksum "tox.ini" }}
    - run:
        name: tox environment setup
        command: pip install --user tox && ~/.local/bin/tox -e qa --notest
    - save_cache:
        paths:
        - /home/circleci/repo/.tox/qa
        - /home/circleci/.local
        - /home/circleci/.cache/pip
        key: qa-dependencies-{{ checksum "tox.ini" }}
    - run:
        name: run qa checks
        command: ~/.local/bin/tox -e qa
  test:
    docker:
    - image: circleci/python:3.6.1
    working_directory: ~/repo
    steps:
    - checkout
    - restore_cache:
        keys:
        - test-dependencies-{{ checksum "tox.ini" }}
    - run:
        name: tox environment setup
        command: pip install --user tox && ~/.local/bin/tox -e py36-dj20 --notest
    - save_cache:
        paths:
        - /home/circleci/repo/.tox/py36-dj20
        - /home/circleci/.local
        - /home/circleci/.cache/pip
        key: test-dependencies-{{ checksum "tox.ini" }}
    - run:
        name: run qa checks
        command: ~/.local/bin/tox -e py36-dj20

  build:
    working_directory: /app
    docker:
    - image: docker:17.05.0-ce-git
    steps:
    - checkout
    - setup_remote_docker:
        docker_layer_caching: true
    - run:
        name: Build application Docker image
        command: |
          docker build -t betagouv/mrs:$CIRCLE_SHA1 .
    - deploy:
        name: Push application Docker image
        command: |
          docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
          docker push betagouv/mrs:$CIRCLE_SHA1
          docker tag betagouv/mrs:$CIRCLE_SHA1 betagouv/mrs:latest
          docker push betagouv/mrs:latest

  branch-tag:
    docker:
    - image: docker:17.05.0-ce-git
    steps:
    - setup_remote_docker:
        docker_layer_caching: true
    - deploy:
        name: Publish betagouv/mrs:{{ .Branch }}
        command: |
          docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
          docker push betagouv/mrs:$CIRCLE_SHA1
          docker tag betagouv/mrs:$CIRCLE_SHA1 betagouv/mrs:$CIRCLE_BRANCH
          docker push betagouv/mrs:$CIRCLE_BRANCH

  deploy-staging:
    working_directory: ~/repo
    docker:
    - image: circleci/python:3.6.1
    steps:
    - restore_cache:
        keys:
        - ansible
    - run:
        name: Install ansible
        command: pip install --user ansible
    - save_cache:
        key: ansible
        paths:
        - ~/.local
        - ~/.cache/pip
    - deploy:
        name: deploy
        command: |
          mkdir -p ~/.ssh && chmod 700 ~/.ssh
          ssh-keyscan $INFRA_REPOSITORY_HOST >> ~/.ssh/known_hosts
          ssh-keyscan $DEPLOY_HOST >> ~/.ssh/known_hosts
          chmod 600 ~/.ssh/known_hosts
          git clone --recursive $INFRA_REPOSITORY infra
          cd infra
          echo $VAULT_PASSWORD > .vault
          export ANSIBLE_VAULT_PASSWORD_FILE=.vault
          ~/.local/bin/ansible-playbook -u deploy -i inventory -e image=betagouv/mrs:$CIRCLE_SHA1 -e instance=staging playbooks/mrs.yml

  deploy-production:
    working_directory: ~/repo
    docker:
    - image: circleci/python:3.6.1
    steps:
    - restore_cache:
        keys:
        - ansible
    - run:
        name: Install ansible
        command: pip install --user ansible
    - save_cache:
        key: ansible
        paths:
        - ~/.local
        - ~/.cache/pip
    - run:
        name: prepare infra repository
        command: git clone --recursive $INFRA_REPOSITORY && echo $VAULT_PASSWORD > .vault
    - deploy:
        name: deploy
        command: |
          mkdir -p ~/.ssh && chmod 700 ~/.ssh
          ssh-keyscan $INFRA_REPOSITORY_HOST >> ~/.ssh/known_hosts
          ssh-keyscan $DEPLOY_HOST >> ~/.ssh/known_hosts
          chmod 600 ~/.ssh/known_hosts
          git clone --recursive $INFRA_REPOSITORY infra
          cd infra
          echo $VAULT_PASSWORD > .vault
          export ANSIBLE_VAULT_PASSWORD_FILE=.vault
          ~/.local/bin/ansible-playbook -u deploy -i inventory -e image=betagouv/mrs:$CIRCLE_SHA1 -e instance=production playbooks/mrs.yml
