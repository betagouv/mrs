# Check https://circleci.com/docs/2.0/language-python/ for more details
version: 2

# Let's use YAML Anchors as demonstrated in
# https://docs.gitlab.com/ee/ci/yaml/#anchors
.deploy_template: &deploy_template
  docker:
  - image: circleci/python:3.6.1
  steps:
  - checkout
  - restore_cache:
      keys: [ansible]
  - deploy:
      name: deploy
      command: ./.circleci/deploy.sh
  - save_cache:
      key: ansible
      paths: [~/.local, ~/.cache/pip]

.master_template: &master_template
  filters:
    branches:
      only: [master]

workflows:
  version: 2
  pipeline:
    jobs:
      - python-qa
      - python-test
      - docker-build
      - js-qa
      - js-test
      - jpic:
          requires: [docker-build]
          filters:
            branches:
              only: [jpic]
      - tbinetruy:
          requires: [docker-build]
          filters:
            branches:
              only: [tbinetruy]
      - staging:
          <<: *master_template
          requires:
          - python-qa
          - python-test
          - docker-build
          - js-qa
          - js-test
      - validate-staging:
          <<: *master_template
          type: approval
          requires: [staging]
      - production:
          <<: *master_template
          requires: [validate-staging]

jobs:
  python-qa:
    docker:
    - image: circleci/python:3.6.1
    steps:
    - checkout
    - restore_cache:
        keys:
        - qa-dependencies-{{ checksum "tox.ini" }}
    - run:
        name: tox environment setup
        command: pip install --user tox && ~/.local/bin/tox -e qa --notest
    - save_cache:
        paths: [.tox/qa, ~/.local, ~/.cache/pip]
        key: qa-dependencies-{{ checksum "tox.ini" }}
    - run:
        name: run qa checks
        command: ~/.local/bin/tox -e qa
  python-test:
    docker:
    - image: circleci/python:3.6.1
    working_directory: ~/repo
    steps:
    - checkout
    - restore_cache:
        keys:
        - test-dependencies-{{ checksum "tox.ini" }}
    - run:
        name: npm environment setup
        command: 'sudo npm install -g npm@latest'
    - run:
        name: npm pack
        command: 'npm pack'
    - run:
        name: tox environment setup
        command: pip install --user tox && ~/.local/bin/tox -e py36-dj20 --notest
    - save_cache:
        paths: [.tox/py36-dj20, ~/.local, ~/.cache/pip]
        key: test-dependencies-{{ checksum "tox.ini" }}
    - run:
        name: run qa checks
        command: ~/.local/bin/tox -e py36-dj20

  js-qa:
    docker:
    - image: circleci/node:4.8.2
    steps:
    - restore_cache:
        key: dependency-cache-jslint
    - run:
        name: install jslint
        command: npm install jslint
    - save_cache:
        key: dependency-cache-jslint
        paths:
          - ./node_modules
    - run:
        name: test
        command: ./node_modules/.bin/jslint src/mrs/static/js

  js-test:
    docker:
    - image: circleci/node:4.8.2
    steps:
    - run:
        name: update-npm
        command: 'sudo npm install -g npm@latest'
    - restore_cache:
        key: dependency-cache-{{ checksum "package.json" }}
    - run:
        name: install-npm-wee
        command: npm install --dev
    - save_cache:
        key: dependency-cache-{{ checksum "package.json" }}
        paths:
          - ./node_modules
    - run:
        name: test
        command: npm test
    - run:
        name: code-coverage
        command: './node_modules/.bin/nyc report --reporter=lcov | codecov'

  docker-build:
    docker:
    - image: docker:17.05.0-ce-git
    steps:
    - checkout
    - setup_remote_docker:
        docker_layer_caching: true
    - run:
        name: Build application Docker image
        command: |
          docker pull betagouv/mrs:$CIRCLE_BRANCH || true
          docker build -t betagouv/mrs:$CIRCLE_SHA1 .
    - deploy:
        name: Push application Docker image
        command: |
          docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
          docker push betagouv/mrs:$CIRCLE_SHA1
          docker tag betagouv/mrs:$CIRCLE_SHA1 betagouv/mrs:$CIRCLE_BRANCH
          docker push betagouv/mrs:$CIRCLE_BRANCH

  staging:
    <<: *deploy_template

  production:
    <<: *deploy_template

  jpic:
    <<: *deploy_template

  tbinetruy:
    <<: *deploy_template
