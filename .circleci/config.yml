# Check https://circleci.com/docs/2.0/language-python/ for more details
version: 2

# Let's use YAML Anchors as demonstrated in
# https://docs.gitlab.com/ee/ci/yaml/#anchors
.deploy_template: &deploy_template
  docker:
  - image: circleci/python:3.6.1
  steps:
  - checkout
  - restore_cache:
      keys: [ansible]
  - deploy:
      name: DEPLOY sh -> ansible-playbook
      command: ./.circleci/deploy.sh
  - save_cache:
      key: ansible
      paths: [~/.local, ~/.cache/pip]

.master_template: &master_template
  filters:
    branches:
      only: [master]

workflows:
  version: 2
  pipeline:
    jobs:
      - python-qa
      - python-test
      - docker-build
      - js-qa
      - js-test
      - docs-qa
      - smoketest:
          requires:
          - docker-build
      - jpic:
          requires: [docker-build]
          filters:
            branches:
              only: [jpic]
      - tbinetruy:
          requires: [docker-build]
          filters:
            branches:
              only: [tbinetruy]
      - staging:
          <<: *master_template
          requires:
          - python-qa
          - python-test
          - docker-build
          - smoketest
          - js-qa
          - js-test
      - validate-staging:
          <<: *master_template
          type: approval
          requires: [staging]
      - production:
          <<: *master_template
          requires: [validate-staging]

jobs:
  smoketest:
    docker:
    - image: betagouv/mrs:$CIRCLE_SHA1
    steps:
    - run:
        name: MRS Runserver
        command: |
          export ALLOWED_HOSTS="localhost"
          export SECRET_KEY=notsecret
          mrs migrate
          echo 'from institution.models import Institution; Institution.objects.create(finess=310000000, origin="http://localhost:8000")' | mrs shell
          mrs runserver
        working_directory: /code
        background: true
    - run:
        name: WAIT runserver
        command: until curl localhost:8000 &> /dev/null; do sleep 1; done
    - run:
        name: RUN smoke tests
        command: node_modules/.bin/jest src/mrs/static/js/smoke.test.js
        working_directory: /code

  python-qa:
    docker:
    - image: circleci/python:3.6.1
    steps:
    - checkout
    - restore_cache:
        keys:
        - qa-dependencies-{{ checksum "tox.ini" }}
    - run:
        name: tox environment setup
        command: pip install --user tox && ~/.local/bin/tox -r -e qa --notest
    - save_cache:
        paths: [~/.local, ~/.cache/pip]
        key: qa-dependencies-{{ checksum "tox.ini" }}
    - run:
        name: run qa checks
        command: ~/.local/bin/tox -e qa

  python-test:
    docker:
    - image: circleci/python:3.6.1
    - image: circleci/postgres:10-alpine
    working_directory: ~/repo
    steps:
    - checkout
    - restore_cache:
        keys:
        - test-dependencies-{{ checksum "tox.ini" }}
    - run:
        name: Tox environment setup
        command: pip install --user tox && ~/.local/bin/tox -r -e py36-dj20-pg --notest
    - save_cache:
        paths: [~/.local, ~/.cache/pip]
        key: test-dependencies-{{ checksum "tox.ini" }}
    - run:
        name: TEST tox -e py36-dj20-pg
        command: |
          ~/.local/bin/tox -e py36-dj20
          PATH=.tox/py36-dj20/bin:$PATH codecov --token $CODECOV_TOKEN -e $TOXENV

  docs-qa:
    docker:
    - image: circleci/python:3.6.1
    steps:
    - checkout
    - restore_cache:
        keys:
        - qa-dependencies-{{ checksum "tox.ini" }}
    - run:
        name: tox environment setup
        command: pip install --user tox && ~/.local/bin/tox -r -e docs --notest
    - save_cache:
        paths: [~/.local, ~/.cache/pip]
        key: qa-dependencies-{{ checksum "tox.ini" }}
    - run:
        name: run qa checks
        command: ~/.local/bin/tox -e docs

  js-qa:
    docker:
    - image: circleci/node@sha256:0a639cc671d763fc330faf68d06884b2c4085aa7b6f129930176b09d4fb68a03
    steps:
    - checkout
    - restore_cache:
        key: dependency-cache-js-{{ checksum "yarn.lock" }}
    - run:
        name: RUN yarn install
        command: sudo npm install -g yarn && yarn install
    - save_cache:
        key: dependency-cache-js-{{ checksum "yarn.lock" }}
        paths:
          - ./node_modules
    - run:
        name: RUN yarn run lint
        command: yarn run lint

  js-test:
    docker:
    - image: circleci/node@sha256:0a639cc671d763fc330faf68d06884b2c4085aa7b6f129930176b09d4fb68a03
    steps:
    - checkout
    - restore_cache:
        key: dependency-cache-js-{{ checksum "yarn.lock" }}
    - run:
        name: RUN yarn install
        command: sudo npm install -g yarn && yarn install
    - save_cache:
        key: dependency-cache-js-{{ checksum "yarn.lock" }}
        paths:
          - ./node_modules
    - run:
        name: Npm test & coverage upload
        command: |
          yarn test
          ./node_modules/.bin/codecov --token=$CODECOV_TOKEN

  docker-build:
    docker:
    - image: docker:17.05.0-ce-git
    steps:
    - checkout
    - setup_remote_docker:
        docker_layer_caching: true
    - run:
        name: DOCKER build
        command: |
          docker pull betagouv/mrs:$CIRCLE_BRANCH || true
          docker build -t betagouv/mrs:$CIRCLE_SHA1 --build-arg GIT_COMMIT=$CIRCLE_SHA1 .
    - deploy:
        name: DOCKER image push betagouv/mrs:{{ .Branch }} & betagouv/mrs:{{ .Environment.CIRCLE_SHA1 }} tags
        command: |
          docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
          docker push betagouv/mrs:$CIRCLE_SHA1
          docker tag betagouv/mrs:$CIRCLE_SHA1 betagouv/mrs:$CIRCLE_BRANCH
          docker push betagouv/mrs:$CIRCLE_BRANCH

  staging:
    <<: *deploy_template

  production:
    <<: *deploy_template

  jpic:
    <<: *deploy_template

  tbinetruy:
    <<: *deploy_template
