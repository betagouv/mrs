---

- name: Installation idempotente du load balancer si necessaire
  include_role: name=yourlabs.traefik
  when: ansible_facts['ansible_local']['yourlabs_traefik']['state']|default('') != 'success'

- name: Notification de pré-déploiement sur slack
  when: lookup("env", "SLACK_TOKEN")
  tags: update
  slack:
    token: '{{ lookup("env", "SLACK_TOKEN") }}'
    username: Django
    color: warning
    channel: tech
    parse: full
    msg: |
      Deploiement de
      {{ lookup("env", "DRONE_COMMIT_MESSAGE") }}
      par
      {{ lookup("env", "DRONE_COMMIT_AUTHOR_NAME") }}
      sur
      {{ lookup("env", "HOST") }}

- name: Déploiement du pod docker-compose
  include_role: name=yourlabs.compose
  vars:
    compose: docker-compose.yml,docker-compose.staging.yml
    compose_django_image: betagouv/mrs:$DRONE_COMMIT
    compose_django_build:
    home: /home/staging

- name: Make home directory
  file: path={{ home }} state=directory owner=root group=root mode=0771
  tags: home

- name: Update .env file from local path
  when: env_file|default(false)
  copy:
    dest: '{{ home }}/.env'
    src: '{{ env_file }}'
    mode: 0600

- name: Update .env file from content
  when: env_content|default(false)
  file:
    path: '{{ home }}/.env'
    content: '{{ env_content }}'
    mode: 0600

- name: Create log dir
  file:
    path: '{{ log_home }}'
    state: directory
    mode: 0700
    owner: '{{ image_uuid }}'
    group: 1000

- name: Configure logrotate for the log volume
  copy:
    dest: /etc/logrotate.d/{{ project_instance }}
    content: |
      {{ log_home }}/*.log {
        daily
        missingok
        rotate 36
        compress
        notifempty
        create 0640 1000 1000
        sharedscripts
      }

# https://github.com/unbit/uwsgi/issues/1858
- name: Create spooler dirs
  with_items: ['', mail, stat]
  file:
    path: '{{ home }}/{{ item }}'
    state: directory
    mode: 0700
    owner: '{{ image_uuid }}'
    group: 1000

- name: Install sh.yml
  include_role: name=yourlabs.shyml

- name: Setup backup cron
  include_role: name=yourlabs.timer
  vars:
    name: '{{ project_instance }}-backup'
    cmd: '{{ home }}/do backup'
    chdir: '{{ home }}'
    oncalendar: '*-*-* 23:00:00'

- name: Setup backup prune cron
  include_role: name=yourlabs.timer
  vars:
    name: '{{ project_instance }}-prune'
    cmd: '{{ home }}/sh.yml backup'
    chdir: '{{ home }}'
    oncalendar: '*-*-* 6:00:00'

- name: Send backup start slack message
  when: slack_token is defined and slack_channel
  tags: update,backup
  slack:
    parse: full
    token: '{{ slack_token }}'
    username: Playlabs
    icon_url: '{{ slack_icon }}'
    color: warning
    channel: '{{ slack_channel }}'
    msg: '{{ project_instance }}: Backup starting ...'

- name: Backup
  block:
  - name: Execute backup
    when: backup_password != False
    tags: [update, migrate, backup]
    shell: ./sh.yml docker.dump
    args:
      chdir: '{{ home }}'

  rescue:
  - name: Send backup failed slack message
    when: slack_token is defined and slack_channel
    tags: update,backup
    slack:
      token: '{{ slack_token }}'
      username: Playlabs
      icon_url: '{{ slack_icon }}'
      color: danger
      parse: full
      channel: '{{ slack_channel }}'
      msg: '{{ project_instance }}: Backup FAILED ! aborting deploy ! '

  - name: Abort if backup failed
    fail: msg="Backup failed"
    tags: update,backup

- name: Send backup success slack message
  when: slack_token is defined and slack_channel
  tags: update,backup
  slack:
    parse: full
    token: '{{ slack_token }}'
    username: Playlabs
    icon_url: '{{ slack_icon }}'
    color: danger
    channel: '{{ slack_channel }}'
    msg: '{{ project_instance }}: Backup success, deploying ...'

- name: Run docker
  tags: deploy
  shell: ./sh.yml docker.start --detach {{ image }}
  args:
    chdir: '{{ home }}'

- name: Send deploy looks like success slack message
  when: slack_token is defined and slack_channel
  tags: update
  slack:
    parse: full
    token: '{{ slack_token }}'
    username: Playlabs
    icon_url: '{{ slack_icon }}'
    color: good
    channel: '{{ slack_channel }}'
    msg: '{{ project_instance }}: Deploy success, executing postdeploy hooks and checking deploy '

- name: INVENTORY MODE ONLY Create super users
  register: django_createsuperuser
  with_items: '{{ users|default([]) }}'
  tags: users
  when: item['name']|vaulted_password(false) and ('superuser' in item.get('roles', {}).get(project_instance, []) or project_instance in item.get('roles', {}).get('superuser', {}))
  shell: docker exec {{ project_instance }} djcli save settings.AUTH_USER_MODEL username username={{ item['name'] }} email={{ item['email'] }}
  failed_when: false

- name: INVENTORY MODE ONLY Update passwords
  tags: users
  failed_when: false
  with_items: '{{ users|default([]) }}'
  when: item['name']|vaulted_password(false) and ('superuser' in item.get('roles', {}).get(project_instance, []) or project_instance in item.get('roles', {}).get('superuser', {}))
  shell: docker exec {{ project_instance }} djcli chpasswd '{{ item["name"]|vaulted_password }}' username={{ item['name'] }}
  no_log: true
  failed_when: false

- include: check.yml
