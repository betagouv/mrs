#!/usr/bin/env shyml
---
name: env.setup
hook: before
help: Global environment variables and fs perms setup
env:
  DB_ENGINE: django.db.backends.postgresql
  DB_NAME: mrs
  DEBUG: 1
  DJANGO_SETTINGS_MODULE: mrs.settings
  ALLOWED_HOSTS: '*'
script:
- test -n "${CI_COMMIT_SHA-}"
  || export CI_COMMIT_SHA=$(git rev-parse --short HEAD)
- export image=${image-betagouv/mrs:master}
- export instance=${instance-test}
- |
  if ! test -f .env; then
    if ! env | grep ^DEBUG= ; then
      read -p  'Production config ? Leave empty, or type 1 for DEBUG config' DEBUG
    fi
  cat <<EOF > .env
  ACME_CA_URI=
  ALLOWED_HOSTS=*
  DB_ENGINE=django.db.backends.postgresql
  DB_HOST=mrs-$instance-postgres
  DB_NAME=mrs-$instance
  DB_PASSWORD=
  DB_USER=django
  DEBUG=${DEBUG-}
  DEFAULT_FROM_EMAIL=
  EMAIL_HOST=
  EMAIL_PORT=
  GIT_COMMIT=
  LETSENCRYPT_EMAIL=
  LETSENCRYPT_HOST=
  LIQUIDATION_EMAIL=
  POSTGRES_DB=mrs-$instance
  POSTGRES_PASSWORD=notsecret
  POSTGRES_USER=django
  RESTIC_PASSWORD=notsecret
  SECRET_KEY=notsecret
  SENTRY_AUTH_TOKEN=
  SENTRY_DSN=
  SENTRY_ORG=sentry
  SENTRY_PROJECT=
  SENTRY_URL=
  TEAM_EMAIL=
  VIRTUAL_HOST=
  VIRTUAL_PROTO=
  EOF
  fi
- source .env

---
name: db.start
help: Start a postgres database
script: |
  if which postgres &> /dev/null; then
    sudo systemctl start postgresql
  elif which docker &> /dev/null; then
    docker inspect mrs_pg || docker run -d -e POSTGRES_USER=$USER --name mrs_pg postgres
    docker start mrs_pg
    export DB_HOST=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' mrs_pg)
  fi

---
name: db.reset
color: red
help: Drop and re-create the database
script: |
  sudo systemctl start postgresql
  sudo -u postgres dropdb mrs || echo could not drop db
  sudo -u postgres createdb -E utf8 -O $USER mrs

---
name: db.reload
color: red
help: Drop and re-create the database, load test data
requires: [db.reset, db.load]

---
name: db.load
help: Load test data
script: |
  mrs migrate --noinput
  djcli delete contenttypes.ContentType
  djcli delete auth.Group
  djcli delete mrsuser.User
  CI=1 mrs loaddata src/mrs/tests/data.json

---
name: db.dump
help: |
  Dump data from the database into test data.json

  This command is used to recreate the test dataset used in automated tests
  from the currently connected database.
script:
- CI=1 mrs mrsstat --refresh
- mrs
    dumpdata
    --indent=4
    $(grep model src/mrs/tests/data.json | sort -u | sed 's/.*model". "\([^"]*\)",*/\1/')
    > src/mrs/tests/data.json

---
name: runserver
color: green
help: Run DEBUG/development server on all interfaces port 8000
script: django-admin runserver --traceback 0:8000

---
name: clean.pyc
help: Find all __pycache__ and delete them recursively
script: find . -type d -name __pycache__ | xargs rm -rf

---
name: venv
help: |
  Setup and activate a venv for a python executable

  Having venv=none makes this job a no-op.
script: |
  if [ "${venv-}" != "none" ]; then
    python=${python-python3}
    venv=${path-.venv.${python-python3}}

    test -d $venv || virtualenv --python=$python $venv

    set +eux; echo activating $venv; source $venv/bin/activate; set -eux
  fi

---
name: pip.install
help: Install project
script: pip install -U -e .

---
name: pip.dev
help: Install project development dependencies
script: pip install -r requirements-dev.txt

---
name: py.test
help: Test executor, supports a $cov and $CODECOV env var.
color: green
requires:
- clean.pyc
- db.start
- venv
- pip.install
- pip.dev
env:
  WEBPACK_LOADER: webpack_mock
  DB_NAME: mrs_test
  CI: true
script: |
  if [ -n "${CODECOV_TOKEN-}" ]; then
    cov="${cov-src}"
  fi

  if [ -n "${cov-}" ]; then
    cov="--cov $cov"
  fi

  py.test -x -s -vv --strict -r fEsxXw ${cov-} ${@-src}

  if [ -n "${CODECOV_TOKEN-}" ]; then
    codecov --token $CODECOV_TOKEN
  fi

---
name: py.testrewrite
help: Rewrite the autogenerated test code at your own discretion
env:
  FIXTURE_REWRITE: 1
requires: [py.test]

---
name: py.qa
script:
- flake8
    --show-source
    --exclude migrations,settings
    --max-complexity=8
    --ignore=E305,W503,N801
    src

---
name: docker.build
help: Build a docker container
script:
- docker build
    --shm-size 512M
    -t $image
    --build-arg GIT_COMMIT=$CI_COMMIT_SHA
    .

---
name: docker.test
help: Run tests in docker containers
requires:
- db.start
script:
- docker run -t
    -v $(pwd):/app
    -w /app
    -e DB_HOST=$DB_HOST
    -e DB_USER=$USER
    -e rewrite=${rewrite-}
    --user root
    ${img-yourlabs/python} ./sh.yml py.test

---
name: docker.testbuild
help: Build a docker container and test in it
requires:
- db.start
- docker.build
- docker.test

---
name: docker.dump
help: Dump data into ./dump for remote backup and restore
script: |
  if test -d dump; then
    rm -rf dump.previous
    mv dump dump.previous || echo Could not move ./dump out of the way
  fi
  mkdir -p dump
  cp sh.yml dump

  getcommit="docker inspect --format='{{.Config.Env}}' betagouv/mrs:master | grep -o 'GIT_COMMIT=[a-z0-9]*'"
  if $getcommit; then
    export $($getcommit)
  fi

  image="$(docker inspect --format='{{.Config.Image}}' mrs-$instance || echo betagouv/mrs:master)"
  echo $image > dump/image

  echo Backing-up container logs before docker shoots them
  docker logs mrs-$instance &> ./log/docker.log || echo "Couldn't get logs from instance"

  if [ -d ./postgres/data ] && docker start mrs-$instance-postgres; then
    docker start mrs-$instance-postgres
    docker logs mrs-$instance-postgres >> ./log/postgres.log
    docker exec mrs-$instance-postgres pg_dumpall -U $POSTGRES_USER -c -f /dump/data.dump
  fi
  cp -a log dump

---
name: docker.load
help: Load dumped data from ./dump
script: |
  export image=$(<./dump/image)
  # backup current data dir by moving it away, in case of manual restore
  postgres_current=postgres/current
  sudo rm -rf $postgres_current
  docker stop mrs-$instance-postgres
  docker rm -f mrs-$instance || echo could not rm container mrs-$instance
  [ ! -d postgres/data ] || sudo mv postgres/data $postgres_current
  shyml_docker.db.start
  docker exec mrs-$instance-postgres psql -d mrs-$instance -U django -f /dump/data.dump
  sudo rm -rf $postgres_current
  shyml_docker.start

---
name: docker.backup
help: Backup a dump remotely
script: |
  export RESTIC_REPOSITORY=./restic
  if [ -f ./.backup_password ]; then
    export RESTIC_PASSWORD_FILE=.backup_password
  fi

  restic backup dump --tag $GIT_COMMIT
  lftp -c "set ssl:check-hostname false;connect $FTP_HOST; mkdir -p mrs-$instance; mirror -Rv $(pwd)/restic mrs-$instance/restic"
  rm -rf $(pwd)/postgres/data/data.dump

---
name: docker.dumpbackup
help: Backup a dump remotely
requires:
- docker.dump
- docker.backup

---
name: docker.network
help: Create a docker network
script:
- docker network inspect mrs-$instance
  || docker network create --driver bridge mrs-$instance

---
name: docker.db.start
help: Start a docker database instance
script:
- docker ps -a | grep mrs-$instance-postgres
  || docker run
    --detach
    --name mrs-$instance-postgres
    --volume $(pwd)/postgres/data:/var/lib/postgresql/data
    --volume $(pwd)/postgres/run:/var/run/postgresql
    --volume $(pwd)/dump:/dump
    --env-file $(pwd)/.env
    --restart always
    --log-driver journald
    --network mrs-$instance
    postgres:10
- docker start mrs-$instance-postgres
- for i in {1..5}; do docker logs mrs-$instance-postgres 2>&1 | grep 'ready to accept connections' && break || sleep 1; done
- docker logs mrs-$instance-postgres
- for i in {1..5}; do test -S postgres/run/.s.PGSQL.5432 && break || sleep 1; done

---
name: docker.db.stop
help: Stop the docker database instance
script: docker stop mrs-$instance-postgres

---
color: red
name: docker.db.reset
help: |
  Destroy all db data and create a new one with test data.

  Note that it will not execute a data dump prior to wiping the data.
script:
- shyml_docker.db.stop
- docker rm -f mrs-$instance-postgres
- shyml_docker.db.start

---
name: docker.start
help: Start a docker instance
requires: [docker.network]
script:
- docker rm -f mrs-$instance || echo could not rm container
- shyml_docker.db.start
- sleep 5 # unfortunate fix for db not ready
- docker run
    --rm
    --name mrs-$instance-migrate
    --volume $(pwd)/log:/app/log
    --env-file $(pwd)/.env
    --network mrs-$instance
    $image
    mrs migrate
- docker run
    --name mrs-$instance
    --restart unless-stopped
    --log-driver journald
    --network mrs-$instance
    --volume $(pwd)/spooler:/app/spooler
    --volume $(pwd)/media:/media
    --volume $(pwd)/log:/app/log
    --env-file $(pwd)/.env
    ${*-$image}
- (! docker network inspect mailcatcher ) || docker network connect mailcatcher mrs-$instance
- docker logs mrs-$instance

---
name: docker.runserver
help: Run a development server on port 8000 with docker
script: shyml_docker.start --publish=8000:8000 --volume $(pwd)/src:/app/src betagouv/mrs mrs runserver 0:8000

---
name: docker.mount
help: Mount the current directory into /app for development
script: shyml_docker.start --volume $(pwd):/app $image

---
name: docker.stop
help: Stop docker instances
script:
- (! docker ps | grep ^mrs-$instance\$) || docker stop mrs-$instance
- (! docker ps | grep ^mrs-$instance-postgres\$) || docker stop mrs-$instance-postgres

---
name: docker.rm
help: Remove everything
script:
- docker rm -f mrs-$instance-postgres || echo container mrs-$instance-postgres not removed
- docker rm -f mrs-$instance || echo container mrs-$instance not removed
- docker network rm mrs-$instance || echo network mrs-$instance not removed

---
color: red
name: docker.reset
help: DELETE ALL DATA and start again
script: |
  if docker network inspect mrs-$instance; then
    docker network disconnect mrs-$instance mrs-$instance || echo could not disconnect instance
    docker network disconnect mrs-$instance mrs-$instance-postgres || echo could not disconnect postgres
    if docker ps -a | grep mrs-$instance-postgres; then
      docker rm -f mrs-$instance-postgres
    fi
    docker network rm mrs-$instance
  fi
  if docker ps -a | grep mrs-$instance\$; then
    docker rm -f mrs-$instance
  fi
  shyml_docker.start

---
name: docker.ps
help: Show docker process
script: docker ps -a | grep mrs-$instance

---
name: docker.logs
help: Show docker process
script:
- docker logs mrs-$instance-postgres
- docker logs mrs-$instance

---
name: docker.shell
help: Shell on docker process
script: docker exec -it mrs-$instance bash
