#!/usr/bin/env shyml
---
name: env.setup
hook: before
help: Global environment variables and fs perms setup
env:
  DB_ENGINE: django.db.backends.postgresql
  DB_NAME: mrs
  DEBUG: 1
  DJANGO_SETTINGS_MODULE: mrs.settings
  ALLOWED_HOSTS: '*'
script:
- test -n "${CI_COMMIT_SHA-}"
  || export CI_COMMIT_SHA=$(git rev-parse --short HEAD)
- export img=betagouv/mrs:$CI_COMMIT_SHA
- test -z "${USER-}" || sudo chown -R ${USER}. .

---
name: db.start
help: Start a postgres database
script: |
  if which postgres &> /dev/null; then
    sudo systemctl start postgresql
  elif which docker &> /dev/null; then
    docker inspect mrs_pg || docker run -d -e POSTGRES_USER=$USER --name mrs_pg postgres
    docker start mrs_pg
    export DB_HOST=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' mrs_pg)
  fi

---
name: db.reset
color: red
help: Drop and re-create the database
script: |
  sudo systemctl start postgresql
  sudo -u postgres dropdb mrs || echo could not drop db
  sudo -u postgres createdb -E utf8 -O $USER mrs

---
name: db.reload
color: red
help: Drop and re-create the database, load test data
requires: [db.reset, db.load]

---
name: db.load
help: Load test data
script: |
  mrs migrate --noinput
  djcli delete contenttypes.ContentType
  djcli delete auth.Group
  djcli delete mrsuser.User
  CI=1 mrs loaddata src/mrs/tests/data.json

---
name: db.dump
help: |
  Dump data from the database into test data.json

  This command is used to recreate the test dataset used in automated tests
  from the currently connected database.
script:
- CI=1 mrs mrsstat --refresh
- mrs
    dumpdata
    --indent=4
    $(grep model src/mrs/tests/data.json | sort -u | sed 's/.*model". "\([^"]*\)",*/\1/')
    > src/mrs/tests/data.json

---
name: runserver
color: green
help: Run DEBUG/development server on all interfaces port 8000
script: django-admin runserver --traceback 0:8000

---
name: clean.pyc
help: Find all __pycache__ and delete them recursively
script: find . -type d -name __pycache__ | xargs rm -rf

---
name: venv
help: |
  Setup and activate a venv for a python executable

  Having venv=none makes this job a no-op.
script: |
  if [ "${venv-}" != "none" ]; then
    python=${python-python3}
    venv=${path-.venv.${python-python3}}

    test -d $venv || virtualenv --python=$python $venv

    set +eux; echo activating $venv; source $venv/bin/activate; set -eux
  fi

---
name: pip.install
help: Install project
script: pip install -U -e .

---
name: pip.dev
help: Install project development dependencies
script: pip install -r requirements-dev.txt

---
name: py.test
help: Test executor, supports a $cov and $CODECOV env var.
color: green
requires:
- clean.pyc
- db.start
- venv
- pip.install
- pip.dev
env:
  WEBPACK_LOADER: webpack_mock
  DB_NAME: mrs_test
  CI: true
script: |
  if [ -n "${cov-}" ]; then
    cov="--cov $cov"
  fi

  py.test -x -s -vv --strict -r fEsxXw ${cov-} ${@-src}

  if [ -n "${CODECOV_TOKEN-}" ]; then
    codecov --token $CODECOV_TOKEN
  fi

---
name: py.testrewrite
help: Rewrite the autogenerated test code at your own discretion
env:
  FIXTURE_REWRITE: 1
requires: [py.test]

---
name: py.qa
script:
- flake8
    --show-source
    --exclude migrations,settings
    --max-complexity=8
    --ignore=E305,W503,N801
    src

---
name: docker.build
help: Build a docker container
script:
- docker build
    --shm-size 512M
    -t ${img-betagouv/mrs:$CI_COMMIT_SHA}
    --build-arg GIT_COMMIT=$CI_COMMIT_SHA
    .

---
name: docker.test
help: Run tests in docker containers
requires:
- db.start
script:
- docker run -t
    -v $(pwd):/app
    -w /app
    -e DB_HOST=$DB_HOST
    -e DB_USER=$USER
    -e rewrite=${rewrite-}
    --user root
    ${img-yourlabs/python} ./sh.yml py.test

---
name: docker.testbuild
help: Build a docker container and test in it
requires:
- db.start
- docker.build
- docker.test
